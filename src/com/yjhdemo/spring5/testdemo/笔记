1.什么是IOC
（1）控制反转，把对象创建和对象之间的调用过程交给Spring管理
（2）使用IOC目的为了耦合度降低
（1）做的案例就是IOC实现
2.IOC的底层原理
（1）xml解析，工厂模式，反射
3.画图讲解IOC   -----------》学习工厂模式
 IOC（接口）
 1.IOC思想基于IOC的容器完成，IOC容器底层就是对象工厂
 2.Spring提供IOC容器实现两种方式：（两个接口）
 （1）BeanFactory ：IOC容器基本实现，是Spring内部的使用接口，不提供给开发人员使用
  *加载配置文件时候不会创建对象，在获取或者是使用的时候才创建对象
 （2）ApplicationCOntext ：BeanFactory接口的子接口，提供更多更强大的功能由开发人员使用
  *加载配置文件时候就会在配置文件对象进行创建
  IOC操作Bean管理（概念）
  1.什么是Bean管理
  （0) Bean管理指的是两个操作---->创建对象，注入属性
  （1）Spring创建对象
  （2）Spring注入属性
  2.Bean管理操作有两种方式
  （1）基于xml配置文件方式实现
  （2）基于注解方式实现
  IOC操作Bean管理（基于xml方式）
  1.基于xml方式创建对象
<!--配置User对象创建-->
    <bean id="usersss" class="com.yjhdemo.spring5.User"></bean>
</beans>
（1）在spring配置中使用Bean标签，标签里面添加对应属性，就可以实现对象创建
（2）在bean标签有很多属性，介绍常用的属性
*id属性：  获取对象唯一标识
*class属性：类全路径（包类路径）
*name属性：基本不用
（3)创建对象时候，默认也是执行无参数构造方法
  2.基于xml方式注入属性
  （1）DI：依赖注入，就是注入属性
  第一种注入方式：就是使用set方法进行注入
  (1)创建类，定义属性和对应的set方法
  /**
   * 演示使用set方法进行属性的注入
   */
  public class Book {
      //创建属性
      private String bname;
      private String bauthor;
  //    创建属性对应的set方法
      public void setBname(String bname) {
          this.bname = bname;
      }

      public void setBauthor(String bauthor) {
          this.bauthor = bauthor;
      }
  }
  （2）在spring配置文件配置对象创建，配置属性注入
  <!--2.set注入属性-->
      <bean id="book" class="com.yjhdemo.spring5.testdemo.Book">
          <!--使用property完成属性注入-->
  <!--        name:属性表示类里面的属性名称，value：表示向该属性注入的值-->
          <property name="bname" value="123"></property>
          <property name="bauthor" value="456"></property>
      </bean>
  第二种注入方式：使用有参数构造进行注入
  (1)创建类，定义属性，创建属性对应有参数构造方法
 （2）在spring配置文件中进行配置
     <bean id="orders" class="com.yjhdemo.spring5.testdemo.Orders">
         <constructor-arg name="oname" value="123"></constructor-arg>
         <constructor-arg name="address" value="753"></constructor-arg>
 <!--   <constructor-arg index="0" value=""></constructor-arg>-->
 <!--  其中index是通过索引值进行赋值操作  -->
     </bean>
     5.p名称空间注入
     （1）使用p名称空间注入，可以简化基于xml配置方式
     第一步添加p名称空间在配置文件中
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:util="http://www.springframework.org/schema/util"
            xmlns:p="http://www.springframework.org/schema/p"
            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">
     第二步进行属性注入，在bean标签里进行操作
         <bean id="book" class="com.yjhdemo.spring5.testdemo.Book" p:bname="jysg" p:bauthor="jfsaj"></bean>
IOC 操作Bean 管理（xml注入其他类型属性）
1.字面量
（1）null值
<bean id="books" class="com.yjhdemo.spring5.testdemo.Books">
    <property name="bname" value="圆梦是傻逼"></property>
    <property name="bauthor" value="天使添屎圆梦"></property>
    <property name="address">
        <null></null>
    </property>
</bean>
（2）属性值包含特殊符号
<!--
1.把尖括号进行转义
2.把带特殊符号内容写到CDATA中
-->
    <property name="address">
        <value>
            <![CDATA[<<南京>>]]>
        </value>
    </property>
2.注入属性 -外部bean
（1）创建两个类Service类和dao类
（2）在service调用dao里面的方法
（3）在spring配置文件中进行配置
类文件
//创建UserDao类型的属性生成对应的setter方法
    private UserDao userDao;

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }

    public  void add(){
        System.out.println("这是service层");
        userDao.update();
        /**
         * 原始方法
         * 创建UserDao对象
         */
        UserDao dao = new UserImpl();
        dao.update();
        /**
         * 通过spring做到
         */

    }
    xml文件
    <!--    注入对象-->
    <!--   ref属性：创建userdao对象bean标签id值 -->
        <property name="userDao" ref="userDao"></property>
    </bean>
        <bean id="userDao" class="com.yjhdemo.spring5.dao.UserImpl"></bean>
从上面这个注入的方式我们发现在spring或者是springboot中的dao层是要注入到service层的而后service在注入到controller层
3.注入属性-内部bean和级联赋值
(1) 一对多关系：部门和员工
一个部门和多个员工，一个员工属于一个部门
部门是一，员工是多
(2)实体类之间表示一对多关系，员工所属部门，使用对象属性进行表示
（3）在spring配置文件中进行相关配置
详见Bean3
<!--    设置俩个普通属性-->
    <property name="ename" value="yjh"></property>
    <property name="gender" value="男"></property>
<!--    设置对象类型属性-->
    <property name="dept">
        <bean id="dept" class="com.yjhdemo.spring5.bean.Dept">
            <property name="dname" value="hr"></property>
        </bean>
    </property>
4.注入属性-级联赋值
类似外部bean
第一种写法
<!--级联赋值操作-->
    <bean id="emp" class="com.yjhdemo.spring5.bean.Emp">
        <property name="gender" value="男"></property>
        <property name="ename" value="圆梦是猴"></property>
<!--        级联赋值-->
        <property name="dept" ref="dept"></property>
    </bean>
    <bean id="dept" class="com.yjhdemo.spring5.bean.Dept">
        <property name="dname" value="碎梦员"></property>
    </bean>
第二种写法
<!--        第二种写法需要为其中不是基本数据类型的对象生成getter方法否则爆红-->
        <property name="dept.dname" value="像猴"></property>
IOC操作Bean管理（xml注入集合属性）
1.注入数组类型属性

2.注入List集合类型属性

3.注入Map集合属性
(1)创建类定义数组类型，list，map，set类型属性生成setter方法
在Spring中进行配置
<!--1.集合类型属性注入-->
    <bean id="stu" class="com.yjhdemo.spring5.collecttiontype.Stu">
        <property name="courses">
            <array>
                <value>javaee</value>
                <value>javase</value>
                <value>javame</value>
                <value>kotlin</value>
            </array>
        </property>
        <!--    2.list类型属性注入-->
<property name="list">
    <list>
        <value>张三</value>
        <value>小三</value>
    </list>
</property>
<!--        map类型-->
        <property name="maps">
            <map>
                <entry key="Java" value="后端"></entry>
                <entry key="PHP" value="快速开发小型网站"></entry>
            </map>
        </property>
<!--        set集合注入-->
        <property name="sets">
            <set>
                <value>mysql</value>
                <value>Redis</value>
            </set>
        </property>
    </bean>
4.在集合里设置对象类型值
        <property name="courseList">
            <list>
                <ref bean="course1"></ref>
                <ref bean="course2"></ref>
            </list>
        </property>
    </bean>
    <!--    创建多个对象-->
    <bean id="course1" class="com.yjhdemo.spring5.collecttiontype.Course">
        <property name="cname" value="Spring5框架课程"></property>
    </bean>
    <bean id="course2" class="com.yjhdemo.spring5.collecttiontype.Course">
        <property name="cname" value="我的鸟框架"></property>
    </bean>
5.把集合注入部分提取出来
（1）在spring配置文件中先引入名称空间这个命名空间叫做Util
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/beans/spring-util.xsd">
<!--    集合类型属性注入-->
</beans>
修改xml的文件头
使用util标签完成list集合注入提取
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/beans/spring-util.xsd">
<!--    提取list集合类型属性注入-->
    <util:list id="booklist">
        <value>安卓第一行代码</value>
        <value>疯狂安卓讲义</value>
        <value>安卓群英会</value>
    </util:list>
    <bean id="book" class="com.yjhdemo.spring5.collecttiontype.Book">
        <property name="list" ref="booklist">
        </property>
    </bean>
</beans>
抽取后的完整代码
IOC操作Bean管理（factotybean）
1.Spring 有两种类型bean，一种普通bean，另一种工厂Bean（Factorybean）

2.普通bean:在配置文件中定义bean类型就是返回类型

3.工厂bean 在配置文件定义Bean类型可以和返回类型不一样。
第一步创建类，让这个类作为工厂bean实现接口factorybean
第二部是先接口里面的方法，在实现的方法中定义返回的Bean类型
    @Test
    public void teststu3(){
        ApplicationContext context = new ClassPathXmlApplicationContext("Beanthree.xml");
        Course myBean = context.getBean("Mybean", Course.class);
        System.out.println(myBean);
//        book.test();
    }
    package com.yjhdemo.spring5.factorybean;

    import com.yjhdemo.spring5.collecttiontype.Course;
    import org.springframework.beans.factory.FactoryBean;

    public class MyBean implements FactoryBean <Course>{
    //
        @Override
        public Course getObject() throws Exception {
            Course course = new Course();
            course.setCname("456");
            return course;
        }
    //定义返回bean
        @Override
        public Class<?> getObjectType() {
            return null;
        }

        @Override
        public boolean isSingleton() {
            return false;
        }
    }
IOC bean操作管理（Bean作用域）
1.在Spring里面，设置创建Bean实例是单实例还是多实例
2.在Spring里面没人情况下Bean是单实例对象
    @Test
    public void teststu1(){
        ApplicationContext context = new ClassPathXmlApplicationContext("Beantow.xml");
        com.yjhdemo.spring5.collecttiontype.Book book = context.getBean("book", com.yjhdemo.spring5.collecttiontype.Book.class);
        com.yjhdemo.spring5.collecttiontype.Book book1 = context.getBean("book", com.yjhdemo.spring5.collecttiontype.Book.class);
        System.out.println(book);
//        book.test();
        System.out.println(book1);
    }



    "C:\Program Files\Java\jdk-14.0.2\bin\java.exe" -ea -Didea.test.cyclic.buffer.size=1048576 "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=58900:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\plugins\junit\lib\junit5-rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\plugins\junit\lib\junit-rt.jar;C:\Users\16920\Desktop\Spring5_demo\out\production\Spring5_demo;C:\Users\16920\Desktop\Spring5_demo\lib\commons-logging-1.1.1.jar;C:\Users\16920\Desktop\Spring5_demo\lib\spring-beans-5.2.6.RELEASE.jar;C:\Users\16920\Desktop\Spring5_demo\lib\spring-expression-5.2.6.RELEASE.jar;C:\Users\16920\Desktop\Spring5_demo\lib\spring-core-5.2.6.RELEASE.jar;C:\Users\16920\Desktop\Spring5_demo;C:\Users\16920\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\16920\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\16920\Desktop\Spring5_demo\lib\spring-context-5.2.6.RELEASE.jar" com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.yjhdemo.spring5.testdemo.testspring5,teststu1
    com.yjhdemo.spring5.collecttiontype.Book@3a52dba3
    com.yjhdemo.spring5.collecttiontype.Book@3a52dba3

    Process finished with exit code 0
    经过测试发现是单实例对象
    3.如何设置单实例还是多实例
    （1）在spring配置文件Bean标签里面有属性(scope)用于设置单实例还是多实例
    （2）scop属性值
    第一个值 默认值 singleton 表示单实例对象
    第二个值 prototype，表示多实例
    通过修改配置文件做到多实例模式
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:p="http://www.springframework.org/schema/p"
           xmlns:util="http://www.springframework.org/schema/util"
           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!--    提取list集合类型属性注入-->
        <util:list id="booklist">
            <value>安卓第一行代码</value>
            <value>疯狂安卓讲义</value>
            <value>安卓群英会</value>
        </util:list>
    <!--    提取list集合类型属性注入使用-->
        <bean id="book" class="com.yjhdemo.spring5.collecttiontype.Book" scope="prototype">
            <property name="list" ref="booklist">
            </property>
        </bean>
    </beans>


    测试代码如下
        @Test
        public void teststu1(){
            ApplicationContext context = new ClassPathXmlApplicationContext("Beantow.xml");
            com.yjhdemo.spring5.collecttiontype.Book book = context.getBean("book", com.yjhdemo.spring5.collecttiontype.Book.class);
            com.yjhdemo.spring5.collecttiontype.Book book1 = context.getBean("book", com.yjhdemo.spring5.collecttiontype.Book.class);
            System.out.println(book);
    //        book.test();
            System.out.println(book1);
        }
        结果如下
        com.yjhdemo.spring5.collecttiontype.Book@24aed80c
        com.yjhdemo.spring5.collecttiontype.Book@3a52dba3
        （3）singleton和prototype的区别
        第一singleton单实例prototype多实例
        第二 设置scope值是singleton时候，加载spring配置文件时候就会创建单实例对象
            设置scope值是prototype时候，不是在加载spring配置文件时候创建对象，在调用getBean方法适合创建多实例对象
            还有两个属性周期
            request
            session
IOC Bean的生命周期
1.生命周期
（1)从对象创建到对象销毁的过程
2.bean生命周期
（1）通过构造器创建Bean实例（无参数的构造）
（2）为bean的属性设置值和对其他Bean的引用（调用setter方法）
 第三步为把Bean的实例传递给Bean的后置处理器方法 （执行该方法 postProcessBeforeInitialization）
 第四步把bean实例传递bean后置处理器的方法
（3）（第四步）调用Bean的初始化方法（需要进行配置）（执行该方法 postProcessAfterInitialization）
（4）（第六步）Bean可以使用了（对象获取到了）
（5）（第七步）当容器关闭时候，调用Bean的销毁方法。（需要进行配置销毁的方法）
3.演示生命周期
测试代码段
    @Test
    public void Beanlifetime(){
        ApplicationContext context = new ClassPathXmlApplicationContext("Beanfour.xml");
        Order order = context.getBean("order", Order.class);
        System.out.println("获得Bean实例对象");
        System.out.println(order);
//        手动销毁Bean实例
        ((ClassPathXmlApplicationContext) context).close();
    }
相关配置文件
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<bean id="order" class="com.yjhdemo.spring5.Beans.Order" init-method="initmethod" destroy-method="DestroyMethod">
    <property name="oname" value="淘宝"></property>
</bean>
</beans>
测试bean
package com.yjhdemo.spring5.Beans;

public class Order {
    private String oname;

    public Order() {
        System.out.println("无参构造执行");
    }

    public void setOname(String oname) {
        this.oname = oname;
        System.out.println("执行setter方法");
    }
//    创建执行初始化的方法
    public  void initmethod(){
        System.out.println("执行初始化方法");
    }
//    创建销毁的方法
    public void DestroyMethod(){
        System.out.println("执行bean销毁的方法");
    }
}
 4.Bean后置处理器，Bean的生命周期有七步
 如果有后置处理器的话
 第三步为把Bean的实例传递给Bean的后置处理器方法
5.演示添加后置处理器效果
（1）创建类，实现接口BeanPostProcess，创建后置处理器
需要的实现的类
package com.yjhdemo.spring5.Beans;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class MyBeanPost implements BeanPostProcessor {
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("在初始化之前执行的方法");
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("在初始化之后执行的方法");
        return bean;
    }
}
需要增加的配置
 <!--    配置后置处理器-->
    <!--    为当前配置文件中的所以Bean配置处理器-->
    <bean id="myBeanPost" class="com.yjhdemo.spring5.Beans.MyBeanPost"></bean>
    执行后的输出

    无参构造执行
    执行setter方法
    在初始化之前执行的方法
    执行初始化方法
    在初始化之后执行的方法
    获得Bean实例对象
    com.yjhdemo.spring5.Beans.Order@7b98f307
    执行bean销毁的方法
    IOC操作自动装配
    1.什么是自动装配
    （1）根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入
    2.演示自动装配的过程
    （1）根据属性名称自动注入
    <!--实现自动装配
    bean标签中autowire，配置自动装配
       autowore属性常用俩个值：
       byname根据属性名称注入，注意注入id的值和类属性名称一样
       bytype根据属性类型注入-->

        <bean id="emp" class="com.yjhdemo.spring5.autowire.Emp" autowire="byName">
    <!--    <property name="dept" ref="dept"></property>-->
    </bean>
        <bean id="dept" class="com.yjhdemo.spring5.autowire.Dept">

        </bean>

